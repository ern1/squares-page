{"version":3,"sources":["components/SoundPlayer.js","components/Grid.js","App.js","serviceWorker.js","index.js"],"names":["SoundPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","noteNr","midiSoundsRef","React","createRef","console","log","setState","_this2","playNote","react_default","a","createElement","midisoundsreact_default","ref","appElementName","instruments","Component","el","Square","size","pressed","color","borderColor","Math","random","toString","substr","onClick","onMouseEnter","updateSquare","style","backgroundColor","border","height","width","transition","Grid","_this3","squares","tableCells","midiPlayer","updateWindowDimensions","bind","assertThisInitialized","length","i","tableRow","squaresRow","j","push","posx","posy","key","ceil","padding","window","addEventListener","removeEventListener","innerWidth","innerHeight","fillGrid","className","cellSpacing","cellPadding","components_SoundPlayer","App","src_components_Grid","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36db5a85.chunk.js","sourcesContent":["import React from 'react';\nimport MIDISounds from 'midi-sounds-react';\n\nclass SoundPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            noteNr: 0,\n            midiSoundsRef: Object = React.createRef()\n        };\n    }\n\n    //const notes[] = {}\n    \n    //var numNotes = 0;\n\n    playNote() {\n        //this.state.midiSoundsRef.playChords(3, [60], 2.5);\n    }\n\n    componentDidMount() {\n\t\tconsole.log('rerender after init');\n\t\tthis.setState(this.state);\n\t}\n\n    render() {\n        this.playNote(); // temp\n\n        return (\n            <MIDISounds \n\t            ref={(ref) => (this.midiSoundsRef = ref)} \n\t            appElementName=\"root\" instruments={[3]} \n\t        />\n        )\n    }\n}\n\nexport default SoundPlayer;","import React from 'react';\nimport SoundPlayer from './SoundPlayer';\nimport './Grid.css';\n\nconst el = React.createElement\n\nclass Square extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: '40pt',\n            pressed: false,\n            color: '#fff',\n            borderColor: '#fff',\n        };\n    }\n\n    // Set random color if not already pressed\n    updateSquare() {\n        if (!this.state.pressed) {\n            this.setState({ color: '#' + Math.random().toString(16).substr(-6) })\n        }\n    }\n\n    render() {\n        return el(\n            'div',\n            { \n                onClick: () => this.setState({ pressed: true, borderColor: this.state.color}), \n                onMouseEnter: () => this.updateSquare(),\n                style: {\n                    backgroundColor: this.state.color,\n                    border: '6px solid' + this.state.borderColor,\n                    height: this.state.size,\n                    width: this.state.size,\n                    transition: '1s' } \n            },\n            null\n        );\n    }\n}\n\n// TODO: Kör onMouseBlabla-event för alla Square, men gör det i Grid-klassen istället så att man kan ändra dom i närheten? Vänta lite med detta, kanske är lite för krävande.. \n// TODO: Spela melodi allt eftersom man eller rutor? Klickar man på en spelas den noten högre etc.\nclass Grid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 0,\n            height: 0,\n            squares: [],\n            tableCells: [],\n            midiPlayer: new SoundPlayer()\n        };\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    fillGrid() {\n        if(!this.state.tableCells.length) {\n            for (let i = 0; i < this.state.height / 40; i++){\n                let tableRow = [];\n                let squaresRow = [];\n\n                for (let j = 0; j < this.state.width / 50; j++){\n                    squaresRow.push(el(Square, {posx: i, posy: j}));\n\n                    tableRow.push(el('td', { \n                        key: i * Math.ceil(this.state.width / 40) + j,\n                        style: { padding: '-100px' },\n                    }, squaresRow[squaresRow.length -1]));\n                }\n\n                // TODO: Använd setState istället\n                this.state.squares[i] = squaresRow;\n                this.state.tableCells[i] = el('tr', { key: i * -1 }, tableRow)\n\n                /*this.setState(prevState => ({\n                    squares: [...this.state.squares, squaresRow],\n                    tableCells: [...this.state.tableCells, el('tr', { key: i * -1 }, tableRow)]\n                }))*/\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n      \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n      \n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    render() {\n        this.fillGrid(); // TODO: Fixa så fillGrid() endast körs en enda gång.\n\n        return (\n            <div>\n                <table className='grid' cellSpacing='0' cellPadding='0'>\n                    <tbody>\n                        {this.state.tableCells}\n                    </tbody>\n                </table>\n\n                <div>\n                    <SoundPlayer></SoundPlayer>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Grid;","import React from 'react';\nimport Grid from './components/Grid'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}